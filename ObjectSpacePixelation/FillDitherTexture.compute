#pragma kernel FillDitherTexture

RWTexture2D<float4> _OutputTexture;
Texture2D _CameraOpaqueTexture;
Texture2D _CameraDepthTexture;
Texture2D _ObjectColorTexture;
Texture2D _ObjectDepthTexture;

float _CameraNear;
float _CameraFar;

[numthreads(8,8,1)]
void FillDitherTexture(uint3 id : SV_DispatchThreadID)
{
    float nearestDepth = 1.0f;
    float4 resultColor = _ObjectColorTexture[id.xy];
    
    if (_CameraDepthTexture[id.xy].r > _ObjectDepthTexture[id.xy].r)
    {
        resultColor = _CameraOpaqueTexture[id.xy];
    }
    else
    {
        for (int u = -2; u <= 2; u++)
        {
            for (int v = -2; v <= 2; v++)
            {
                int2 offset = id.xy + uint2(u, v);
                float objDepth01 = 1.0f - _ObjectDepthTexture[offset].r;
                float4 objColor = _ObjectColorTexture[offset];

                resultColor = objDepth01;
                if (objDepth01 < nearestDepth)
                {
                    nearestDepth = objDepth01;
                    resultColor = objColor;
                }
            }
        }
    }


    if (_CameraDepthTexture[id.xy].r > _ObjectDepthTexture[id.xy].r)
    {
        resultColor = _CameraOpaqueTexture[id.xy];
    }

    // float camDepth01 = 1.0f - _CameraDepthTexture[id.xy].r;
    // if (nearestDepth > camDepth01)
    // {
    //     _OutputTexture[id.xy] = _CameraOpaqueTexture[id.xy];
    // }

    _OutputTexture[id.xy] = resultColor;
    // _OutputTexture[id.xy] = _ObjectColorTexture[id.xy];
    // _OutputTexture[id.xy] = 1.0f - _ObjectDepthTexture[id.xy].r;
    // _OutputTexture[id.xy] = _CameraOpaqueTexture[id.xy];
}
